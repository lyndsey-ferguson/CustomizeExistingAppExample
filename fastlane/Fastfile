fastlane_require 'open-uri'

platform :ios do
  lane :customize_build do |options|
    welcome_message = options[:welcome_message] || 'Hello World!'
    background_color = options[:background_color] || '#FFFFFFFF'

    update_plist(
      plist_path: './AppExample/AppExample/configurations.plist',
      block: proc do |plist|
        plist[:WelcomeMessage] = welcome_message
        plist[:BackgroundHexColor] = background_color
      end
    )
  end

  lane :build_custom_app do |options|
    customize_build options
    keychain_data = get_keychain_from_vault(vault_addr: 'http://127.0.0.1:8200', keychain_name: 'lyndsey', keychain_path: '/Users/lyndsey.ferguson/Library/Keychains/lyndsey.keychain-db')
    unlock_keychain(path: keychain_data[:keychain_path], password: keychain_data[:keychain_password], set_default: true)
    disable_automatic_code_signing(path: './AppExample/AppExample.xcodeproj')
    update_project_provisioning(
      xcodeproj: './AppExample/AppExample.xcodeproj',
      profile: "./AppExample/Yillyyally.mobileprovision",
      build_configuration: "Release",
      code_signing_identity: "Apple Distribution: Jedidiah Fonner (57738V598V)"
    )
    update_project_team(
      path: './AppExample/AppExample.xcodeproj',
      teamid: '57738V598V'
    )
    build_app(
        scheme: 'AppExample',
        project: './AppExample/AppExample.xcodeproj',
        output_directory: 'test_output',
        output_name: 'example.ipa',
        export_options: {
          method: "app-store",
          provisioningProfiles: {
            "com.yilly.yally" => "359e767c-5f71-4b2e-aedd-17645f951e02"
          }
        },
        export_team_id: '57738V598V',
        xcargs: 'CODE_SIGN_IDENTITY="Apple Distribution: Jedidiah Fonner (57738V598V)"'
    )
  end

  lane :download_latest_release do |options|
    result = github_api(
      http_method: 'GET',
      path: '/repos/lyndsey-ferguson/CustomizeExistingAppExample/releases/latest',
      api_token: File.read(File.absolute_path('../.github_token'))
    )
    body = JSON.parse(result[:body])
    browser_download_url = body["assets"].first["browser_download_url"]

    zipfile = Tempfile.new(['latest_release', 'zip'])
    zipfile.binmode
    open(browser_download_url) do |download|
      zipfile.write(download.read)
    end
    zipfile.close
    latest_release_dir = File.absolute_path('../latest_release')
    FileUtils.mkdir_p(latest_release_dir)
    zip_package_path = File.join(latest_release_dir, 'package.zip')
    FileUtils.rm_f(zip_package_path)
    FileUtils.cp(zipfile.path, zip_package_path)
    zip_package_path
  end

  lane :customize_built_app do |options|
    zip_package_path = download_latest_release
    # unzip the ipa/images package into a tmp directory
    Dir.mktmpdir("latest_release_pkg") do |latest_release_pkg_path|
      Dir.chdir(latest_release_pkg_path) do
        sh("unzip -o -q #{zip_package_path}")

        example_ipa_filepath = File.absolute_path('example.ipa')
        app_iconset_dirpath = File.absolute_path('AppIcon.appiconset')

        # now that we have the package unzipped into a temporary folder, lets unzip the ipa so we can operate inside of it
        Dir.mktmpdir("customize_built_app") do |unzipped_ipa_path|
          Dir.chdir(unzipped_ipa_path) do
            sh("unzip -o -q #{example_ipa_filepath}")
            # customize images
            # unlock keychain
            # get customer profile, code signing id, and team id
            # code sign
            puts Dir.pwd
          end
        end
      end
    end
  end
end

